/**
*  @file
*  @copyright defined in go-seele/LICENSE
 */

package common

import (
	"bytes"

	"github.com/seeleteam/go-seele/common/hexutil"
)

const (
	// HashLength the leghth of hash
	HashLength = 32
)

var EmptyHash Hash = Hash{}

// Hash the hash value generated by sha-3
type Hash [HashLength]byte

// BytesToHash convert bytes to hash value
func BytesToHash(b []byte) Hash {
	a := &Hash{}
	a.SetBytes(b)
	return *a
}

// StringToHash string to hash
func StringToHash(s string) Hash {
	return BytesToHash([]byte(s))
}

// SetBytes sets the hash to the value of b. If b is larger than len(a) it will panic
func (a *Hash) SetBytes(b []byte) {
	copy(a[:], b)
}

// Bytes return its actual bits
func (a Hash) Bytes() []byte {
	return a[:]
}

// String to string
func (a Hash) String() string {
	return string(a[:])
}

// Equal returns a boolean reporting whether this hash a is equal to the input hash b.
func (a Hash) Equal(b Hash) bool {
	return bytes.Equal(a[:], b[:])
}

func (a Hash) ToHex() string {
	return hexutil.BytesToHex(a[:])
}
