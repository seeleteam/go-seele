/**
*  @file
*  @copyright defined in go-seele/LICENSE
 */

package common

import (
	"bytes"
	"math/big"

	"github.com/seeleteam/go-seele/common/hexutil"
)

const (
	// HashLength the leghth of hash
	HashLength = 32
)

// EmptyHash empty hash
var EmptyHash = Hash{}

// Hash the hash value generated by sha-3
type Hash [HashLength]byte

// BytesToHash converts bytes to hash value
func BytesToHash(b []byte) Hash {
	a := &Hash{}
	a.SetBytes(b)
	return *a
}

// StringToHash converts a string to the hash
func StringToHash(s string) Hash {
	return BytesToHash([]byte(s))
}

// SetBytes sets the hash to the value of b.
func (a *Hash) SetBytes(b []byte) {
	if len(b) > HashLength {
		b = b[len(b)-HashLength:]
	}

	copy(a[HashLength-len(b):], b)
}

// Bytes returns its actual bits
func (a Hash) Bytes() []byte {
	return a[:]
}

// String returns the string representation of the hash
func (a Hash) String() string {
	return a.ToHex()
}

// Equal returns a boolean value indicating whether the hash a is equal to the input hash b.
func (a *Hash) Equal(b Hash) bool {
	return bytes.Equal(a[:], b[:])
}

// ToHex returns the hex form of the hash
func (a Hash) ToHex() string {
	return hexutil.BytesToHex(a[:])
}

// HexToHash return the hash form of the hex
func HexToHash(hex string) (Hash, error) {
	byte, err := hexutil.HexToBytes(hex)
	if err != nil {
		return EmptyHash, err
	}

	hash := BytesToHash(byte)
	return hash, nil
}

// IsEmpty return true if this hash is empty. Otherwise, false.
func (a Hash) IsEmpty() bool {
	return a == EmptyHash
}

// BigToHash converts a big int to Hash.
func BigToHash(b *big.Int) Hash { return BytesToHash(b.Bytes()) }

// Big converts this Hash to a big int.
func (a Hash) Big() *big.Int { return new(big.Int).SetBytes(a[:]) }

// MarshalText marshals the Hash to HEX string.
func (a Hash) MarshalText() ([]byte, error) {
	str := a.ToHex()
	return []byte(str), nil
}

// UnmarshalText unmarshals Hash from HEX string.
func (a *Hash) UnmarshalText(json []byte) error {
	b, err := HexToHash(string(json))
	if err != nil {
		return err
	}

	copy(a[:], b[:])
	return nil
}
